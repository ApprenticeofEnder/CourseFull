# syntax = docker/dockerfile:1


# Make sure RUBY_VERSION matches the Ruby version in .ruby-version and Gemfile
ARG RUBY_VERSION=3.3.1
FROM registry.docker.com/library/ruby:$RUBY_VERSION-slim as base

# Rails app lives here
WORKDIR /rails

# Set production environment
ENV RAILS_ENV="test" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development" \
    SHELL="bash"

# Throw-away build stage to reduce size of final image
FROM base as build

# Install packages needed to build gems and node modules
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential git libpq-dev libvips pkg-config

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Install client dependencies
FROM node:20-slim AS client-build

RUN apt-get update && apt-get install -y ca-certificates

# Install client dependencies
WORKDIR /rails/client

RUN mkdir -p /rails/public

RUN npm install -g pnpm

COPY client/package.json client/pnpm-lock.yaml ./

RUN pnpm install

COPY client .

COPY --from=1password/op:2 /usr/local/bin/op /usr/local/bin/op

COPY .env.prod.tpl .

ARG OP_SERVICE_ACCOUNT_TOKEN

RUN export OP_SERVICE_ACCOUNT_TOKEN=$OP_SERVICE_ACCOUNT_TOKEN && op run --env-file='.env.prod.tpl' pnpm run build

# Final stage for app image
FROM base

WORKDIR /rails

# Install packages needed for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libvips postgresql-client && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy 1password binary
COPY --from=1password/op:2 /usr/local/bin/op /usr/local/bin/op

# Copy built artifacts: gems, application
COPY --from=build /usr/local/bundle /usr/local/bundle
COPY --from=build /rails /rails
COPY --from=client-build /rails/client/out /rails/public

# Run and own only the runtime files as a non-root user for security
RUN useradd rails --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp
USER rails:rails

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["op", "run", "--env-file='.env.prod.tpl'", "./bin/rails", "server"]
