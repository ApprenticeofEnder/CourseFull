require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/courses", type: :request do
  def valid_attributes(user)
    attributes = attributes_for(
      :api_v1_course,
      user: nil,
      goal: nil,
      grade: nil,
      deliverable_goal: nil,
    )
    attributes[:api_v1_semester_id] = user.semesters.first.id
    return attributes
  end

  def invalid_attributes(is_updating = false)
    attributes_hash = valid_attributes(@user).dup

    attributes_hash.delete(:goal)
    attributes_hash.delete(:grade)
    attributes_hash.delete(:deliverable_goal)
    attributes_hash.delete(:semester) if is_updating

    attributes = attributes_hash.keys

    @attribute_count = attributes.length
    attributes.each do |attribute|
      yield attributes_for(
              :api_v1_course,
              user: nil,
              goal: nil,
              grade: nil,
              deliverable_goal: nil,
              attribute => nil,
            )
    end
  end

  def user
    create(:api_v1_user) do |user|
      create(:api_v1_semester, user: user) do |semester|
        create(:api_v1_course, semester: semester, user: user)
      end
    end
  end

  let(:valid_headers) {
    {}
  }

  before :each do
    @user = user
    @user_2 = user
  end

  describe "POST /api/v1/courses" do
    context "with valid auth token" do
      it "creates a new Api::V1::Course with valid parameters" do
        expect {
          post "/api/v1/courses",
               params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        }.to change(Api::V1::Course, :count).by(1)
      end

      it "returns a JSON response with the new Api::V1::Course" do
        post "/api/v1/courses",
             params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "attaches the new Api::V1::Course to the user" do
        post "/api/v1/courses",
             params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        expect(response.parsed_body[:api_v1_user_id]).to eq(@user[:id])
      end

      it "does not create a new Api::V1::Course with invalid parameters" do
        invalid_attributes { |attribute_set|
          expect {
            post "/api/v1/courses",
                 params: { api_v1_course: attribute_set }, headers: auth_headers(@user), as: :json
          }.to change(Api::V1::Semester, :count).by(0)
        }
      end
    end

    context "with invalid auth token" do
      it "should render a 401 unauthorized response for a missing token" do
        post "/api/v1/courses",
             params: { api_v1_course: valid_attributes(@user) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end
end

#   describe "GET /index" do
#     it "renders a successful response" do
#       Api::V1::Course.create! valid_attributes
#       get api_v1_courses_url, headers: valid_headers, as: :json
#       expect(response).to be_successful
#     end
#   end

#   describe "GET /show" do
#     it "renders a successful response" do
#       course = Api::V1::Course.create! valid_attributes
#       get api_v1_course_url(course), as: :json
#       expect(response).to be_successful
#     end
#   end

#   describe "POST /create" do
#     context "with valid parameters" do
#       it "creates a new Api::V1::Course" do
#         expect {
#           post api_v1_courses_url,
#                params: { api_v1_course: valid_attributes }, headers: valid_headers, as: :json
#         }.to change(Api::V1::Course, :count).by(1)
#       end

#       it "renders a JSON response with the new api_v1_course" do
#         post api_v1_courses_url,
#              params: { api_v1_course: valid_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:created)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end

#     context "with invalid parameters" do
#       it "does not create a new Api::V1::Course" do
#         expect {
#           post api_v1_courses_url,
#                params: { api_v1_course: invalid_attributes }, as: :json
#         }.to change(Api::V1::Course, :count).by(0)
#       end

#       it "renders a JSON response with errors for the new api_v1_course" do
#         post api_v1_courses_url,
#              params: { api_v1_course: invalid_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:unprocessable_entity)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end
#   end

#   describe "PATCH /update" do
#     context "with valid parameters" do
#       let(:new_attributes) {
#         skip("Add a hash of attributes valid for your model")
#       }

#       it "updates the requested api_v1_course" do
#         course = Api::V1::Course.create! valid_attributes
#         patch api_v1_course_url(course),
#               params: { api_v1_course: new_attributes }, headers: valid_headers, as: :json
#         course.reload
#         skip("Add assertions for updated state")
#       end

#       it "renders a JSON response with the api_v1_course" do
#         course = Api::V1::Course.create! valid_attributes
#         patch api_v1_course_url(course),
#               params: { api_v1_course: new_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:ok)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end

#     context "with invalid parameters" do
#       it "renders a JSON response with errors for the api_v1_course" do
#         course = Api::V1::Course.create! valid_attributes
#         patch api_v1_course_url(course),
#               params: { api_v1_course: invalid_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:unprocessable_entity)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end
#   end

#   describe "DELETE /destroy" do
#     it "destroys the requested api_v1_course" do
#       course = Api::V1::Course.create! valid_attributes
#       expect {
#         delete api_v1_course_url(course), headers: valid_headers, as: :json
#       }.to change(Api::V1::Course, :count).by(-1)
#     end
#   end
# end
