require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/courses", type: :request do
  def valid_attributes(user)
    attributes = attributes_for(
      :api_v1_course,
      user: nil,
      goal: nil,
      grade: nil,
      deliverable_goal: nil,
    )
    attributes[:api_v1_semester_id] = user.semesters.first.id
    return attributes
  end

  def invalid_attributes(is_updating = false)
    attributes_hash = valid_attributes(@user).dup

    attributes_hash.delete(:goal)
    attributes_hash.delete(:grade)
    attributes_hash.delete(:deliverable_goal)
    attributes_hash.delete(:api_v1_semester_id) if is_updating

    attributes = attributes_hash.keys

    @attribute_count = attributes.length
    attributes.each do |attribute|
      yield attributes_for(
              :api_v1_course,
              user: nil,
              goal: nil,
              grade: nil,
              deliverable_goal: nil,
              attribute => nil,
            )
    end
  end

  def course(user, semester)
    create(:api_v1_course, semester: semester, user: user)
  end

  def semester(user)
    create(:api_v1_semester, user: user) do |semester|
      course(user, semester)
    end
  end

  def user
    create(:api_v1_user) do |user|
      semester(user)
    end
  end

  let(:valid_headers) {
    {}
  }

  before :each do
    @user = user
    @semester = @user.semesters.first
    @course_id = @semester.courses.first.id
    @user_2 = user
    @semester_2 = @user_2.semesters.first
    @course_2_id = @semester_2.courses.first.id
  end

  describe "GET /api/v1/courses" do
    context "with valid auth token" do
      it "renders a successful response" do
        get "/api/v1/courses", headers: auth_headers(@user), as: :json
        expect(response).to be_successful
      end

      it "gets all currently available courses" do
        create(:api_v1_course, semester: @semester, user: @user)
        create(:api_v1_course, semester: @semester, user: @user)

        get "/api/v1/courses", headers: auth_headers(@user), as: :json
        expect(response).to be_successful
        expect(response.parsed_body.length).to eq(3)
      end

      it "gets different courses for different users" do
        create(:api_v1_course, semester: @semester, user: @user)
        create(:api_v1_course, semester: @semester_2, user: @user_2)

        [@user, @user_2].each do |current_user|
          get "/api/v1/courses", headers: auth_headers(current_user), as: :json
          expect(response).to be_successful
          expect(response.parsed_body.length).to eq(2)
        end
      end
    end

    context "with invalid auth token" do
      it "should render a 401 unauthorized response for a missing token" do
        get "/api/v1/courses", headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe "GET /api/v1/courses/:id" do
    context "with valid auth token" do
      it "renders a successful response" do
        get "/api/v1/courses/#{@course_id}", headers: auth_headers(@user), as: :json
        expect(response).to be_successful
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "gets the correct course" do
        get "/api/v1/courses/#{@course_id}", headers: auth_headers(@user), as: :json
        expect(response.parsed_body[:title]).to eq(@semester.courses.first[:title])
      end

      it "gets only semesters the user has access to" do
        get "/api/v1/courses/#{@course_2_id}", headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      it "renders a 403 forbidden response for a nonexistent ID" do
        get "/api/v1/courses/#{SecureRandom.uuid}", headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:forbidden)
      end
    end

    context "with invalid auth token" do
      it "should render a 401 unauthorized response for a missing token" do
        get "/api/v1/courses/#{@course_id}", headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe "POST /api/v1/courses" do
    context "with valid auth token" do
      it "creates a new Api::V1::Course with valid parameters" do
        expect {
          post "/api/v1/courses",
               params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        }.to change(Api::V1::Course, :count).by(1)
      end

      it "returns a JSON response with the new Api::V1::Course" do
        post "/api/v1/courses",
             params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "attaches the new Api::V1::Course to the user" do
        post "/api/v1/courses",
             params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        expect(response.parsed_body[:api_v1_user_id]).to eq(@user[:id])
      end

      it "ensures that the parent semester belongs to the user" do
        attributes = valid_attributes(@user)
        attributes[:api_v1_semester_id] = @semester_2.id
        expect {
          post "/api/v1/courses",
               params: { api_v1_course: attributes }, headers: auth_headers(@user), as: :json
          expect(response).to have_http_status(:forbidden)
        }.to change(Api::V1::Course, :count).by(0)
      end

      it "does not create a new Api::V1::Course with invalid parameters" do
        invalid_attributes { |attribute_set|
          expect {
            post "/api/v1/courses",
                 params: { api_v1_course: attribute_set }, headers: auth_headers(@user), as: :json
          }.to change(Api::V1::Semester, :count).by(0)
        }
      end
    end

    context "with invalid auth token" do
      it "should render a 401 unauthorized response for a missing token" do
        post "/api/v1/courses",
             params: { api_v1_course: valid_attributes(@user) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe "PATCH /api/v1/courses/:id" do
    context "with valid auth token" do
      it "should render a successful JSON response with valid parameters" do
        patch "/api/v1/courses/#{@course_id}",
              params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:ok)
        expect(response).to be_successful
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "should update the Api::V1::Course" do
        old_course = @semester.courses.first.dup
        patch "/api/v1/courses/#{@course_id}",
              params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        @semester.reload
        expect(old_course[:title]).to_not eq(@semester.courses.first[:title])
      end

      it "should return an error response with invalid parameters" do
        invalid_attributes(is_updating: true) { |attribute_set|
          patch "/api/v1/courses/#{@course_id}",
                params: { api_v1_course: attribute_set }, headers: auth_headers(@user), as: :json
          expect(response).to have_http_status(:unprocessable_entity)
        }
      end

      it "renders a 403 forbidden response when trying to access another user's course" do
        patch "/api/v1/courses/#{@course_2_id}",
              params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      it "does not allow a user to update another's semester" do
        old_course = @semester.courses.first.dup
        patch "/api/v1/courses/#{@course_2_id}",
              params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        @semester.reload
        expect(old_course[:title]).to eq(@semester.courses.first[:title])
      end

      it "renders a 403 forbidden response for a nonexistent ID" do
        patch "/api/v1/courses/#{SecureRandom.uuid}",
              params: { api_v1_course: valid_attributes(@user) }, headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:forbidden)
      end
    end

    context "with invalid auth token" do
      it "should render a 401 unauthorized response for a missing token" do
        patch "/api/v1/courses/#{@course_id}",
              params: { api_v1_course: valid_attributes(@user) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe "DELETE /api/v1/courses/:id" do
    context "with valid auth token" do
      it "renders a successful response" do
        delete "/api/v1/courses/#{@course_id}", headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:no_content)
      end

      it "deletes the course from the database" do
        expect {
          delete "/api/v1/courses/#{@course_id}", headers: auth_headers(@user), as: :json
        }.to change(Api::V1::Course, :count).by(-1)
      end

      it "deletes only courses the user has access to" do
        expect {
          delete "/api/v1/courses/#{@course_2_id}", headers: auth_headers(@user), as: :json
          expect(response).to have_http_status(:forbidden)
        }.to change(Api::V1::Course, :count).by(0)
      end

      it "renders a 403 forbidden response for a nonexistent ID" do
        delete "/api/v1/courses/#{SecureRandom.uuid}", headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:forbidden)
      end
    end

    context "with invalid auth token" do
      it "should render a 401 unauthorized response for a missing token" do
        delete "/api/v1/courses/#{@course_id}", headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end
end
