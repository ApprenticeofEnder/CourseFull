# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/deliverables', type: :request do
  def course(user, semester)
    create(:api_v1_course, semester:, user:) do |course|
      create(:api_v1_assignment, course:, user:)
    end
  end

  def semester(user)
    create(:api_v1_semester, user:) do |semester|
      course(user, semester)
    end
  end

  def user
    create(:api_v1_user) do |user|
      semester(user)
    end
  end

  let(:valid_headers) do
    {}
  end

  let!(:primary_user) { user }
  let!(:primary_semester) { primary_user.semesters.first }
  let!(:primary_course) { primary_semester.courses.first }
  let!(:primary_deliverable_id) { primary_course.deliverables.first.id }
  let!(:secondary_user) { user }
  let!(:secondary_semester) { secondary_user.semesters.first }
  let!(:secondary_course) { secondary_semester.courses.first }
  let!(:secondary_deliverable_id) { secondary_course.deliverables.first.id }

  def valid_attributes(course)
    attributes = attributes_for(
      :api_v1_assignment,
      user: nil,
      goal: nil
    )
    attributes[:api_v1_course_id] = course.id
    attributes
  end

  def valid_attributes_completed(course)
    attributes = attributes_for(
      :api_v1_completed_assignment,
      user: nil,
      goal: nil
    )
    attributes[:api_v1_course_id] = course.id
    attributes
  end

  def invalid_attributes(is_updating: false)
    attributes_hash = valid_attributes(primary_user).dup

    attributes_hash.delete(:goal)

    attributes_hash.delete(:notes) if is_updating
    attributes_hash.delete(:api_v1_course_id) if is_updating

    attributes = attributes_hash.keys

    @attribute_count = attributes.length
    attributes.each do |attribute|
      yield attributes_for(
        :api_v1_assignment,
        user: nil,
        goal: nil,
        attribute => nil
      )
    end
  end

  describe 'GET /' do
    context 'with valid auth token' do
      it 'renders a successful response' do
        get '/api/v1/deliverables', headers: auth_headers(primary_user), as: :json
        expect(response).to be_successful
      end

      it 'gets all currently available deliverables' do
        create(:api_v1_assignment, course: primary_course, user: primary_user)
        create(:api_v1_assignment, course: primary_course, user: primary_user)

        get '/api/v1/deliverables', headers: auth_headers(primary_user), as: :json
        expect(response.parsed_body.length).to eq(3)
      end

      it 'gets different deliverables for different users' do
        create(:api_v1_assignment, course: primary_course, user: primary_user)
        create(:api_v1_assignment, course: secondary_course, user: secondary_user)

        [primary_user, secondary_user].each do |current_user|
          get '/api/v1/deliverables', headers: auth_headers(current_user), as: :json
          expect(response).to be_successful
          expect(response.parsed_body.length).to eq(2)
        end
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        get '/api/v1/deliverables', headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'GET /:id' do
    context 'with valid auth token' do
      it 'renders a successful response' do
        get "/api/v1/deliverables/#{primary_deliverable_id}", headers: auth_headers(primary_user), as: :json
        expect(response).to be_successful
      end

      it 'gets the correct deliverable' do
        get "/api/v1/deliverables/#{primary_deliverable_id}", headers: auth_headers(primary_user), as: :json
        expect(response.parsed_body[:name]).to eq(primary_course.deliverables.first[:name])
      end

      it 'gets only deliverables the user has access to' do
        get "/api/v1/deliverables/#{secondary_deliverable_id}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      it 'renders a 403 forbidden response for a nonexistent ID' do
        get "/api/v1/deliverables/#{SecureRandom.uuid}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        get "/api/v1/deliverables/#{primary_deliverable_id}", headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'POST /' do
    context 'with valid auth token' do
      it 'creates a new Api::V1::Deliverable with valid parameters' do
        expect do
          post '/api/v1/deliverables',
               params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: auth_headers(primary_user), as: :json
        end.to change(Api::V1::Deliverable, :count).by(1)
      end

      it 'returns a JSON response with the new Api::V1::Deliverable' do
        post '/api/v1/deliverables',
             params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:created)
      end

      it 'attaches the new Api::V1::Course to the user' do
        post '/api/v1/deliverables',
             params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: auth_headers(primary_user), as: :json
        expect(response.parsed_body[:api_v1_user_id]).to eq(primary_user[:id])
      end

      it 'ensures that the parent course belongs to the user' do
        attributes = valid_attributes(primary_course)
        attributes[:api_v1_course_id] = secondary_course.id
        expect do
          post '/api/v1/deliverables',
               params: { api_v1_deliverable: attributes }, headers: auth_headers(primary_user), as: :json
          expect(response).to have_http_status(:forbidden)
        end.not_to change(Api::V1::Course, :count)
      end

      it 'does not create a new Api::V1::Course with invalid parameters' do
        invalid_attributes do |attribute_set|
          expect do
            post '/api/v1/deliverables',
                 params: { api_v1_deliverable: attribute_set }, headers: auth_headers(primary_user), as: :json
          end.not_to change(Api::V1::Semester, :count)
        end
      end

      xit 'updates goals if the deliverable is completed' do
        pending "ADD THIS TEST #{__FILE__}"
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        post '/api/v1/deliverables',
             params: { api_v1_deliverable: valid_attributes(primary_user) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  # TODO: Add tests for what happens when you create already-completed deliverables
  # TODO: Add tests to make sure that courses don't auto-complete

  describe 'PATCH /:id' do
    context 'with valid auth token' do
      it 'renders a successful JSON response with valid parameters' do
        patch "/api/v1/deliverables/#{primary_deliverable_id}",
              params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:ok)
      end

      it 'updates the Api::V1::Deliverable' do
        old_deliverable = primary_course.deliverables.first.dup
        patch "/api/v1/deliverables/#{primary_deliverable_id}",
              params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: auth_headers(primary_user), as: :json
        expect(old_deliverable[:name]).not_to eq(primary_course.deliverables.first[:name])
      end

      it 'returns an error response with invalid parameters' do
        invalid_attributes(is_updating: true) do |attribute_set|
          patch "/api/v1/deliverables/#{primary_deliverable_id}",
                params: { api_v1_deliverable: attribute_set }, headers: auth_headers(primary_user), as: :json
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end

      it "renders a 403 forbidden response when trying to access another user's deliverable" do
        patch "/api/v1/deliverables/#{secondary_deliverable_id}",
              params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      it "does not allow a user to update another's deliverable" do
        old_course = primary_semester.courses.first.dup
        patch "/api/v1/deliverables/#{secondary_deliverable_id}",
              params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: auth_headers(primary_user), as: :json
        primary_semester.reload
        expect(old_course[:title]).to eq(primary_semester.courses.first[:title])
      end

      it 'renders a 403 forbidden response for a nonexistent ID' do
        patch "/api/v1/deliverables/#{SecureRandom.uuid}",
              params: { api_v1_course: valid_attributes(primary_user) }, headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      xit 'updates goals for a completed deliverable' do
        pending "ADD THIS TEST #{__FILE__}"
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        patch "/api/v1/deliverables/#{primary_deliverable_id}",
              params: { api_v1_deliverable: valid_attributes(primary_course) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'DELETE /:id' do
    context 'with valid auth token' do
      it 'renders a successful response' do
        delete "/api/v1/deliverables/#{primary_deliverable_id}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:no_content)
      end

      it 'deletes the deliverable from the database' do
        expect do
          delete "/api/v1/deliverables/#{primary_deliverable_id}", headers: auth_headers(primary_user), as: :json
        end.to change(Api::V1::Deliverable, :count).by(-1)
      end

      it 'deletes only deliverables the user has access to' do
        expect do
          delete "/api/v1/deliverables/#{secondary_deliverable_id}", headers: auth_headers(primary_user), as: :json
          expect(response).to have_http_status(:forbidden)
        end.not_to change(Api::V1::Deliverable, :count)
      end

      it 'renders a 403 forbidden response for a nonexistent ID' do
        delete "/api/v1/deliverables/#{SecureRandom.uuid}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      xit 'updates goals for the course' do
        delete "/api/v1/deliverables/#{primary_deliverable_id}", headers: auth_headers(primary_user), as: :json
        post '/api/v1/deliverables',
             params: { api_v1_deliverable: valid_attributes_completed(primary_course) }, headers: auth_headers(primary_user), as: :json
        post '/api/v1/deliverables',
             params: { api_v1_deliverable: valid_attributes_completed(primary_course) }, headers: auth_headers(primary_user), as: :json
        get '/api/v1/deliverables', headers: auth_headers(primary_user), as: :json
        response.parsed_body.each do |deliverable|
          puts(deliverable)
        end
        pending 'Low priority test'
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        delete "/api/v1/deliverables/#{primary_deliverable_id}", headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end
end
