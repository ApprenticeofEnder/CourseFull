# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/semesters', type: :request do
  def user
    create(:api_v1_user) do |user|
      create(:api_v1_semester, user:)
    end
  end

  let(:valid_attributes) { attributes_for(:api_v1_semester, user: nil) }
  let(:valid_headers) do
    {}
  end

  let!(:primary_user) { user }
  let!(:primary_semester_id) { primary_user.semesters.first.id }
  let!(:secondary_user) { user }
  let!(:secondary_semester_id) { secondary_user.semesters.first.id }

  def invalid_attributes
    attributes = valid_attributes.keys
    @attribute_count = attributes.length
    attributes.each do |attribute|
      yield attributes_for(:api_v1_semester, attribute => nil)
    end
  end

  describe 'GET /api/v1/semesters' do
    context 'with valid auth token' do
      it 'gets any currently available semesters' do
        get '/api/v1/semesters', headers: auth_headers(primary_user), as: :json
        expect(response).to be_successful
      end

      it 'gets all currently available semesters' do
        create(:api_v1_semester, user: primary_user)
        create(:api_v1_semester, user: primary_user)
        get '/api/v1/semesters', headers: auth_headers(primary_user), as: :json
        expect(response.parsed_body.length).to eq(3)
      end

      it 'gets different semesters for different users' do
        create(:api_v1_semester, user: primary_user)
        create(:api_v1_semester, user: secondary_user)

        [primary_user, secondary_user].each do |current_user|
          get '/api/v1/semesters', headers: auth_headers(current_user), as: :json
          expect(response.parsed_body.length).to eq(2)
        end
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        get '/api/v1/semesters', headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'GET /api/v1/semesters/:id' do
    context 'with valid auth token' do
      it 'renders a successful response' do
        get "/api/v1/semesters/#{primary_semester_id}", headers: auth_headers(primary_user), as: :json
        expect(response).to be_successful
      end

      it 'gets the correct semester' do
        get "/api/v1/semesters/#{primary_semester_id}", headers: auth_headers(primary_user), as: :json
        expect(response.parsed_body[:name]).to eq(primary_user.semesters.first[:name])
      end

      it 'gets only semesters the user has access to' do
        get "/api/v1/semesters/#{secondary_semester_id}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      # NOTE: Maybe this should be a 404?
      it 'renders a 403 forbidden response for a nonexistent ID' do
        get "/api/v1/semesters/#{SecureRandom.uuid}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        get "/api/v1/semesters/#{primary_semester_id}", headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'POST /api/v1/semesters' do
    context 'with valid auth token' do
      it 'creates a new Api::V1::Semester with valid parameters' do
        expect do
          post '/api/v1/semesters',
               params: { api_v1_semester: valid_attributes }, headers: auth_headers(primary_user), as: :json
        end.to change(Api::V1::Semester, :count).by(1)
      end

      it 'returns a JSON response with the new Api::V1::Semester' do
        post '/api/v1/semesters',
             params: { api_v1_semester: valid_attributes }, headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:created)
      end

      it 'attaches the new Api::V1::Semester to the user' do
        post '/api/v1/semesters',
             params: { api_v1_semester: valid_attributes }, headers: auth_headers(primary_user), as: :json
        expect(response.parsed_body[:api_v1_user_id]).to eq(primary_user[:id])
      end

      it 'does not create a new Api::V1::Semester with invalid parameters' do
        invalid_attributes do |attribute_set|
          expect do
            post '/api/v1/semesters',
                 params: { api_v1_semester: attribute_set }, headers: auth_headers(primary_user), as: :json
          end.not_to change(Api::V1::Semester, :count)
        end
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        post '/api/v1/semesters',
             params: { api_v1_semester: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'PATCH /api/v1/semesters/:id' do
    let(:new_attributes) { attributes_for(:api_v1_semester, user: nil) }

    context 'with valid auth token' do
      it 'renders a successful JSON response with valid parameters' do
        patch "/api/v1/semesters/#{primary_semester_id}",
              params: { api_v1_semester: new_attributes }, headers: auth_headers(primary_user), as: :json
        expect(response).to be_successful
      end

      it 'updates the Api::V1::Semester' do
        old_semester = primary_user.semesters.first.dup
        patch "/api/v1/semesters/#{primary_semester_id}",
              params: { api_v1_semester: new_attributes }, headers: auth_headers(primary_user), as: :json
        primary_user.reload
        expect(old_semester[:name]).not_to eq(primary_user.semesters.first[:name])
      end

      it 'returns an error response with invalid parameters' do
        invalid_attributes do |attribute_set|
          patch "/api/v1/semesters/#{primary_semester_id}",
                params: { api_v1_semester: attribute_set }, headers: auth_headers(primary_user), as: :json
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end

      it "renders a 403 forbidden response when trying to access someone else's semester" do
        patch "/api/v1/semesters/#{secondary_semester_id}",
              params: { api_v1_semester: new_attributes }, headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      it "does not allow a user to update another's semester" do
        old_semester = secondary_user.semesters.first.dup
        patch "/api/v1/semesters/#{secondary_semester_id}",
              params: { api_v1_semester: new_attributes }, headers: auth_headers(primary_user), as: :json
        secondary_user.reload
        expect(old_semester[:name]).to eq(secondary_user.semesters.first[:name])
      end

      it 'renders a 403 forbidden response for a nonexistent ID' do
        patch "/api/v1/semesters/#{SecureRandom.uuid}",
              params: { api_v1_semester: new_attributes }, headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        patch "/api/v1/semesters/#{primary_semester_id}",
              params: { api_v1_semester: new_attributes }, headers: valid_headers, as: :json

        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'DELETE /api/v1/semesters/:id' do
    context 'with valid auth token' do
      it 'renders a successful response' do
        delete "/api/v1/semesters/#{primary_semester_id}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:no_content)
      end

      it 'deletes the semester from the database' do
        expect do
          delete "/api/v1/semesters/#{primary_semester_id}", headers: auth_headers(primary_user), as: :json
        end.to change(Api::V1::Semester, :count).by(-1)
      end

      it 'returns a 403 error when attempting to delete another user\'s semester' do
        delete "/api/v1/semesters/#{secondary_semester_id}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end

      it 'deletes only semesters the user has access to' do
        expect do
          delete "/api/v1/semesters/#{secondary_semester_id}", headers: auth_headers(primary_user), as: :json
        end.not_to change(Api::V1::Semester, :count)
      end

      it 'renders a 403 forbidden response for a nonexistent ID' do
        delete "/api/v1/semesters/#{SecureRandom.uuid}", headers: auth_headers(primary_user), as: :json
        expect(response).to have_http_status(:forbidden)
      end
    end

    context 'with invalid auth token' do
      it 'renders a 401 unauthorized response for a missing token' do
        delete "/api/v1/semesters/#{primary_semester_id}", headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end
end
