# frozen_string_literal: true

require 'rails_helper'
# require "generator"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/users', type: :request do
  def user
    create(:api_v1_user)
  end

  def course(user, semester)
    create(:api_v1_course, semester:, user:, status: :active) do |course|
      create_list(:api_v1_completed_assignment, 4, course:, user:,
                                                   mark: Faker::Number.between(from: 20.0, to: 100.0))
    end
  end

  def semester(user)
    create(:api_v1_semester, user:, status: :active) do |semester|
      (0..2).each do |_i|
        course(user, semester)
      end
      semester.update_goal
    end
  end

  let(:valid_attributes) do
    attributes_for(:api_v1_user)
  end
  let(:fixed_supabase_id_attributes) do
    attributes_for(:api_v1_user, supabase_id: '332600c0-f46e-406d-b2a2-824f0a750ed2')
  end
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::UsersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  def invalid_attributes
    attributes_hash = valid_attributes.dup
    attributes_hash.delete(:courses_remaining)
    attributes = attributes_hash.keys
    @attribute_count = attributes.length
    attributes.each do |attribute|
      yield attributes_for(:api_v1_user, attribute => nil)
    end
  end

  # Remaining resource APIs should have constraints on what users can mess with to their own stuff

  before do
    @user = user
    @user_2 = user
  end

  describe 'GET /api/v1/users/me' do
    context 'with valid token' do
      it 'returns a successful status code' do
        get '/api/v1/users/me', headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:ok)
      end

      it 'gets user data' do
        get '/api/v1/users/me', headers: auth_headers(@user), as: :json
        expect(response.parsed_body[:email]).to eq(@user[:email])
      end
    end

    context 'with invalid token' do
      it 'renders a 401 forbidden response for a missing token' do
        get '/api/v1/users/me', headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end

    context 'with multiple users' do
      it 'returns different data for different users' do
        expect(@user_2[:first_name]).not_to eq(@user[:first_name])

        get '/api/v1/users/me', headers: auth_headers(@user), as: :json
        expect(response.parsed_body[:first_name]).to eq(@user[:first_name])

        get '/api/v1/users/me', headers: auth_headers(@user_2), as: :json
        expect(response.parsed_body[:first_name]).to eq(@user_2[:first_name])
      end
    end
  end

  describe 'GET /api/v1/users/me/progress' do
    before do
      semester(@user)
      semester(@user)
      semester(@user_2)
      semester(@user_2)
    end

    context 'with valid token' do
      it 'returns a successful response' do
        get '/api/v1/users/me/progress', headers: auth_headers(@user), as: :json
        expect(response).to be_successful
      end

      # TODO: Make these more robust, maybe with actual checks for the number of courses in a semester, different cases for completed assignments, etc.

      it 'returns the correct amount of semesters' do
        get '/api/v1/users/me/progress', headers: auth_headers(@user), as: :json
        expect(response.parsed_body.length).to eq(2)

        get '/api/v1/users/me/progress', headers: auth_headers(@user_2), as: :json
        expect(response.parsed_body.length).to eq(2)
      end
    end
  end

  describe 'POST /api/v1/users' do
    context 'with valid parameters' do
      it 'creates a new Api::V1::User' do
        expect do
          post '/api/v1/users',
               params: { api_v1_user: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Api::V1::User, :count).by(1)
      end

      it 'renders a JSON response with the new Api::V1::User' do
        post '/api/v1/users',
             params: { api_v1_user: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      it 'does not allow duplicate Supabase IDs' do
        post '/api/v1/users',
             params: { api_v1_user: fixed_supabase_id_attributes }, headers: valid_headers, as: :json
        expect do
          post '/api/v1/users',
               params: { api_v1_user: fixed_supabase_id_attributes }, headers: valid_headers, as: :json
        end.not_to change(Api::V1::User, :count)
      end

      it 'gives a default value of 3 courses remaining' do
        post '/api/v1/users',
             params: { api_v1_user: valid_attributes }, headers: valid_headers, as: :json
        expect(response.parsed_body[:courses_remaining]).to eq(3)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Api::V1::User' do
        attribute_sets_tested = 0
        invalid_attributes do |attribute_set|
          expect do
            post '/api/v1/users',
                 params: { api_v1_user: attribute_set }, as: :json
          end.not_to change(Api::V1::User, :count)
          attribute_sets_tested += 1
        end
        expect(attribute_sets_tested).to eq(@attribute_count)
      end

      it 'renders a JSON response with errors for the new Api::V1::User' do
        invalid_attributes do |attribute_set|
          post '/api/v1/users',
               params: { api_v1_user: attribute_set }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to match(a_string_including('application/json'))
        end
      end
    end
  end

  describe 'DELETE /api/v1/users/me' do
    context 'with valid auth token' do
      it 'destroys the requested Api::V1::User' do
        expect do
          delete '/api/v1/users/me', headers: auth_headers(@user), as: :json
        end.to change(Api::V1::User, :count).by(-1)
      end

      it 'returns a successful deletion status code' do
        delete '/api/v1/users/me', headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:no_content)
      end
    end

    context 'with invalid auth token' do
      it 'does not destroy the requested Api::V1::User' do
        expect do
          delete '/api/v1/users/me', headers: valid_headers, as: :json
        end.not_to change(Api::V1::User, :count)
      end

      it 'returns an unauthorized status code' do
        delete '/api/v1/users/me', headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe 'PATCH /api/v1/users/me' do
    let(:new_attributes) do
      attributes_for(:api_v1_user)
    end

    context 'with valid parameters' do
      it 'updates the requested api_v1_user' do
        old_user = @user.dup
        patch '/api/v1/users/me',
              params: { api_v1_user: new_attributes }, headers: auth_headers(@user), as: :json
        @user.reload
        %i[email first_name last_name supabase_id].each do |key|
          expect(@user[key]).not_to eq(old_user[key])
        end
      end

      it 'renders a JSON response with the api_v1_user' do
        patch '/api/v1/users/me',
              params: { api_v1_user: new_attributes }, headers: auth_headers(@user), as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the api_v1_user' do
        invalid_attributes do |attribute_set|
          patch '/api/v1/users/me',
                params: { api_v1_user: attribute_set }, headers: auth_headers(@user), as: :json
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to match(a_string_including('application/json'))
        end
      end
    end

    context 'with invalid auth token' do
      it 'returns an unauthorized status code' do
        patch '/api/v1/users/me',
              params: { api_v1_user: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end
end
